<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_mioms_vsts_integ.queryHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>queryHelper</name>
        <script><![CDATA[var queryHelper = Class.create();
queryHelper.prototype = {
    initialize: function() {
    },

	// executeQuery: Execute a simple get query on servicenow using GlideRecord
	// input: searchObject - a json representation of the query in the format
	// {"tablename":"change_request","queryitems": [{"field":"","value":""}]}
	// output: the first of the object matching the query 
	executeQuery: function(searchObject)
	{
		if (searchObject)
			{
				var query = new GlideRecord(searchObject.tablename);
				searchObject.queryitems.forEach(
					function(queryitem){
						if (!queryitem.op)
							{
								queryitem.op = '=';
							}
						
						query.addQuery(queryitem.field, queryitem.op ,queryitem.value);
					}
				);
		
				query.query();
				if (query.next())
				{
					return query;
				}
			}
		
		return null;
	},
	
	//createRecord: create a new record in provided servicenow table
	//input: tablename - table to create a record in
	//input: requestObj - field value collection to set in the record to create
	//output: created object
	createRecord: function(tablename, requestObj)
	{
		if (tablename && requestObj)
			{
				var returnObj = new GlideRecord(tablename);
				returnObj.initialize();
				for (var key in requestObj)
				{			
					returnObj[key] = requestObj[key];			
				}

				returnObj.insert();
				return returnObj;
			}
		
		return null;
	},
	
	//updateRecord: update the supplied object and save in the relevant table
	//input: originalObj - the object to update
	//input: requestObj - field value collection to set in the record
	//output: updated object
	updateRecord: function(originalObj, requestObj)
	{
		if (originalObj && requestObj)
			{
				for (var key in requestObj)
				{			
					originalObj[key] = requestObj[key];			
				}

				return originalObj.update();				
			}
		
		return null;
	},
	
    type: 'queryHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-25 18:56:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7822fde1dbd29b80d8f0788dbf9619a5</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>queryHelper</sys_name>
        <sys_package display_value="vsts_Integration" source="x_mioms_vsts_integ">9d2281f2dbf55340d8f0788dbf9619c3</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="vsts_Integration">9d2281f2dbf55340d8f0788dbf9619c3</sys_scope>
        <sys_update_name>sys_script_include_7822fde1dbd29b80d8f0788dbf9619a5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-28 18:41:50</sys_updated_on>
    </sys_script_include>
</record_update>
