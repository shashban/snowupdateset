<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_mioms_vsts_integ.ChangeManager_old</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ChangeManager_old</name>
        <script><![CDATA[var ChangeManager_old = Class.create();

var vstsmetadatafieldname = 'x_mioms_vsts_integ_vsts_meta_data';
var vstsmetadatainput = 'vstsmetadata';
var additionalparamsinput = 'additionalparams';

var assignmentgroupkey = "assignment_group";
var configurationitemkey = "cmdb_ci";

ChangeManager_old.prototype = {
    initialize: function() {
    },
	
	runquery: function(searchitem){		
		if (searchitem && searchitem.tablename)
			{
				var query = new GlideRecord(searchitem.tablename);
				for(var queryitem in searchitem.queryitems)
					{
						query.addQuery(queryitem.field, queryitem.value);
					}
				
				query.query();
				if (query.next())
					{
						return query;
					}
			}
		
		return null;
	},

	// Find if there is an existing change request for the vsts deployment
	findchange: function(releasemetadata){	
	if (releasemetadata)
	{	
		var searchObject = {};
		searchObject.tablename = 'change_request';
		var queryitems = [];
		var queryItem = {};
		queryItem.field = vstsmetadatafieldname;
		queryItem.value = releasemetadata;
		queryitems.push(queryItem);
		searchObject.queryitems = queryitems;
		return runquery(searchObject);
	}

	return null;
	},
	
	type: 'ChangeManager_old'
};

ChangeManager_old.getvalue = function(type, label)
{
	var returnVal = '';
	var gr = null;
	switch (type)
	{
		case assignmentgroupkey:
			gr = new GlideRecord("sys_user_group");			
			break;
		case configurationitemkey:
			gr = new GlideRecord("cmdb_ci");			
			break;
		default:
			break;
	}
	
	if (gr != null)
		{
			gr.addQuery("name", label);
			gr.query();
			if (gr.next()){
				returnVal = gr.sys_id;
			}
		}
	
	return returnVal;
};

// flatten the requestdata to change fields
// additional params come as a nested json from vsts
ChangeManager_old.parse = function(requestObj)
{
	var returnObj = {};
	if (requestObj != null)
		{
			for (var key in requestObj)
			{			
				switch (key)
					{
						case vstsmetadatainput:
							returnObj[vstsmetadatafieldname] = requestObj[key];
							break;
						case assignmentgroupkey:
						case configurationitemkey:
							returnObj[key] = ChangeManager_old.getvalue(key, requestObj[key]);
							break;
	  				    case additionalparamsinput:
							if (requestObj[key] != null)
								{
									for(var additionalparam in requestObj[key])
									{
										returnObj[additionalparam] = requestObj[key][additionalparam];
									}
								}
							
							break;
						default:
							returnObj[key] = requestObj[key];
							break;
					}
			}
		}
	
	return returnObj;
};

// create a new change request for the vsts deployment
ChangeManager_old.create = function(requestObj)
{
	var returnObj = {};
	if (requestObj != null)
		{
			var change = new GlideRecord('change_request');
			change.initialize();
			for (var key in requestObj)
				{			
					change[key] = requestObj[key];			
				}

			change.insert();
			returnObj.number = change.getDisplayValue("number");
			returnObj.state = change.getDisplayValue("state");
		}
	
	return returnObj;
};

ChangeManager_old.searchChange = function(releasemetadata)
{
	var returnObj = {};
	var change = ChangeManager_old.findchange(releasemetadata);
	if (change)
		{
			returnObj.number = change.getDisplayValue("number");
			returnObj.state = change.getDisplayValue("state");		
		}
	else
		{
			returnObj.number = "";
		}
	
	return returnObj;
};

ChangeManager_old.update = function(releasemetadata, newstate)
{
	var returnObj = {};
	var change = ChangeManager_old.findchange(releasemetadata);
	if (change)
		{
			change.state = newstate;
			change.update();
			returnObj.number = change.getDisplayValue("number");
			returnObj.state = change.getDisplayValue("state");		
		}
		else
		{
			returnObj.number = "";
		}
	
	return returnObj;
};


ChangeManager_old.test = function()
{
var specialfieldsjson = {"specialfields":[{"key":"assignment_group","value":{"tablename":"sys_user_group","queryitems":[{"field":"name","value":"inputval"}],"returnfield":"sys_id"}},{"key":"cmdb_ci","value":{"tablename":"cmdb_ci","queryitems":[{"field":"name","value":"inputval"}],"returnfield":"sys_id"}},{"key":"priority","value":{"tablename":"sys_choice","queryitems":[{"field":"name","value":"change_request"},{"field":"element","value":"priority"},{"field":"label","value":"inputval"}],"returnfield":"value"}}]};
var inputkey = 'priority';
return ChangeManager_old.valueforkeyinspecialfields(specialfieldsjson, inputkey);	
};

ChangeManager_old.valueforkeyinspecialfields = function(specialfieldsjson, inputkey)
{
	var matchingvalue = null;
	specialfieldsjson.specialfields.forEach(function(item){if (item.key == inputkey) {matchingvalue = item.value;}});
	return matchingvalue;
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-21 17:10:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>166334d0dbde5780d8f0788dbf96192f</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>ChangeManager_old</sys_name>
        <sys_package display_value="vsts_Integration" source="x_mioms_vsts_integ">9d2281f2dbf55340d8f0788dbf9619c3</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="vsts_Integration">9d2281f2dbf55340d8f0788dbf9619c3</sys_scope>
        <sys_update_name>sys_script_include_166334d0dbde5780d8f0788dbf96192f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-25 21:19:23</sys_updated_on>
    </sys_script_include>
</record_update>
